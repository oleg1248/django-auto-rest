import copy
from django.conf.urls import url
from django.core.exceptions import ValidationError
from django.urls import include
from rest_framework import serializers, viewsets, routers

class GETparamsViewSet(viewsets.ModelViewSet):
    def get_queryset(self):
        queryset = super().get_queryset()
        query_params = copy.deepcopy(dict(self.request.query_params))
        try:
            order_by = query_params.pop('order_by')[0]
        except KeyError:
            order_by = None
        try:
            limit = int(query_params.pop('limit')[0])
            if limit < 0:
                limit = None
        except (KeyError, ValueError):
            limit = None
        for key in query_params.keys():
            query_params[key] = query_params[key][0]
        try:
            queryset = queryset.filter(**query_params)
        except ValidationError:
            pass
        if order_by:
            queryset = queryset.order_by(order_by)
        if limit:
            queryset = queryset[:limit]
        return queryset

{% for model in models %}
from {{ model.module }} import {{ model.name }}{% endfor %}

{% for model in models %}
class {{ model.name }}Serializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = {{ model.name }}
        fields = [{% for field in model.fields %}
            '{{ field }}', {% endfor %}
        ]

class {{ model.name }}ViewSet(GETparamsViewSet):
    queryset = {{ model.name }}.objects.all()
    serializer_class = {{ model.name }}Serializer
{% endfor %}

router = routers.DefaultRouter()
{% for model in models %}
router.register(r'{{ model.lower_case_name_plural }}', {{ model.name }}ViewSet){% endfor %}

urlpatterns = [
    url(r'^', include(router.urls)),
]